# services/api/routers/training.py
from __future__ import annotations

import os
import json
import uuid
from typing import Dict, Any, List, Optional

from fastapi import APIRouter, HTTPException, Body

ROOT = os.path.expanduser("~/demo-library")
RUNS_ROOT = os.path.join(ROOT, "services", "api", ".runs")
FEEDBACK_DIR = os.path.join(RUNS_ROOT, "feedback")
os.makedirs(FEEDBACK_DIR, exist_ok=True)

router = APIRouter()

@router.post("/v1/training/feedback")
def submit_feedback(payload: Dict[str, Any] = Body(...)):
    """
    Accept human review payload:
    {
      "items": [
        {"application_id": "...", "ai_decision": "approved|denied", "human_decision": "...", "human_rule_reasons": "..."}
      ]
    }
    Stores to .runs/feedback/feedback_<id>.json and computes agreement score.
    """
    items: List[Dict[str, Any]] = payload.get("items") or []
    if not isinstance(items, list) or not items:
        raise HTTPException(status_code=400, detail="No feedback items provided.")

    # simple agreement score
    total = len(items)
    agree = sum(1 for it in items if it.get("ai_decision") == it.get("human_decision"))
    score = float(agree) / float(total) if total else 0.0

    fid = f"feedback_{uuid.uuid4().hex[:8]}.json"
    fpath = os.path.join(FEEDBACK_DIR, fid)
    with open(fpath, "w", encoding="utf-8") as f:
        json.dump({"items": items, "agreement": score}, f, indent=2)

    # keep a symlink/marker for "latest"
    latest = os.path.join(FEEDBACK_DIR, "latest.json")
    try:
        if os.path.islink(latest) or os.path.exists(latest):
            os.remove(latest)
    except Exception:
        pass
    try:
        # best-effort copy
        with open(fpath, "r", encoding="utf-8") as src, open(latest, "w", encoding="utf-8") as dst:
            dst.write(src.read())
    except Exception:
        pass

    return {"ok": True, "saved": fid, "agreement": score}

@router.get("/v1/training/matching_score")
def matching_score():
    """
    Returns last submitted feedback agreement score as "matching score".
    """
    latest = os.path.join(FEEDBACK_DIR, "latest.json")
    if not os.path.exists(latest):
        return {"has_feedback": False, "agreement": None}
    try:
        with open(latest, "r", encoding="utf-8") as f:
            data = json.load(f)
        return {"has_feedback": True, "agreement": data.get("agreement")}
    except Exception:
        return {"has_feedback": False, "agreement": None}

# (Optional) stubs you may already have in your project:
@router.post("/v1/training/train")
def train_stub(config: Dict[str, Any] = Body(...)):
    return {"job_id": uuid.uuid4().hex[:8], "status": "queued"}

@router.post("/v1/training/promote")
def promote_stub():
    return {"ok": True, "message": "Promoted latest candidate (stub)."}

@router.get("/v1/training/production_meta")
def production_meta_stub():
    return {"has_production": False, "meta": {}}
