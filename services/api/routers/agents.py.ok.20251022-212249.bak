# services/api/routers/agents.py
from __future__ import annotations
import io
import os
import uuid
import time
import json
import pandas as pd
from fastapi import APIRouter, UploadFile, File, Form, HTTPException
from fastapi.responses import JSONResponse
from agents.credit_appraisal.agent import run_credit_appraisal

ROOT = os.path.expanduser("~/demo-library")
RUNS_ROOT = os.path.join(ROOT, "services", "api", ".runs")
os.makedirs(RUNS_ROOT, exist_ok=True)

router = APIRouter()

@router.post("/v1/agents/credit_appraisal/run")
async def run_agent(
    file: UploadFile | None = File(default=None),
    # LLM hints
    use_llm_narrative: str = Form(default="false"),
    llm_model: str = Form(default=""),
    hardware_flavor: str = Form(default=""),
    # Rule mode + classic params
    rule_mode: str = Form(default="classic"),
    min_employment_years: str = Form(default="2"),
    max_debt_to_income: str = Form(default="0.45"),
    min_credit_history_length: str = Form(default="3"),
    max_num_delinquencies: str = Form(default="2"),
    max_current_loans: str = Form(default="3"),
    requested_amount_min: str = Form(default="1000"),
    requested_amount_max: str = Form(default="200000"),
    loan_term_months_allowed: str = Form(default="12,24,36,48,60"),
    salary_floor: str = Form(default="3000"),
    # debt pressure
    min_income_debt_ratio: str = Form(default="0.35"),
    compounded_debt_factor: str = Form(default="1.0"),
    monthly_debt_relief: str = Form(default="0.50"),
    # NDI params
    ndi_value: str = Form(default="800"),
    ndi_ratio: str = Form(default="0.5"),
    # model threshold controls
    threshold: str = Form(default="0.45"),
    target_approval_rate: str = Form(default=""),
    random_band: str = Form(default="true"),
    random_approval_band: str = Form(default="true"),
):
    # Validate CSV provided (no sample mode here)
    if file is None:
        raise HTTPException(status_code=400, detail="CSV file is required. No sample dataset allowed.")
    try:
        b = await file.read()
        df = pd.read_csv(io.BytesIO(b))
        if df.empty:
            raise ValueError("Empty CSV")
    except Exception as e:
        raise HTTPException(status_code=400, detail=f"Invalid CSV: {e}")

    run_id = f"run_{int(time.time())}_{uuid.uuid4().hex[:8]}"
    run_dir = os.path.join(RUNS_ROOT, run_id)
    os.makedirs(run_dir, exist_ok=True)

    # Parse rule payload
    def as_float(x, default):
        try:
            if x == "" or x is None:
                return default
            return float(x)
        except Exception:
            return default
    def as_int(x, default):
        try:
            if x == "" or x is None:
                return default
            return int(float(x))
        except Exception:
            return default

    rules = {
        "mode": rule_mode.lower(),
        "classic": {
            "max_dti": as_float(max_debt_to_income, 0.45),
            "min_emp_years": as_int(min_employment_years, 2),
            "min_credit_hist": as_int(min_credit_history_length, 3),
            "salary_floor": as_int(salary_floor, 3000),
            "max_delinquencies": as_int(max_num_delinquencies, 2),
            "max_current_loans": as_int(max_current_loans, 3),
            "req_min": as_int(requested_amount_min, 1000),
            "req_max": as_int(requested_amount_max, 200000),
            "loan_terms": [as_int(x, 0) for x in loan_term_months_allowed.split(",") if x.strip()],
            "min_income_debt_ratio": as_float(min_income_debt_ratio, 0.35),
            "compounded_debt_factor": as_float(compounded_debt_factor, 1.0),
            "monthly_debt_relief": as_float(monthly_debt_relief, 0.50),
        },
        "ndi": {
            "ndi_value": as_float(ndi_value, 800.0),
            "ndi_ratio": as_float(ndi_ratio, 0.5),
        },
        "threshold": (None if threshold == "" else as_float(threshold, 0.45)),
        "target_rate": (None if target_approval_rate == "" else as_float(target_approval_rate, 0.4)),
        "random_band": str(random_band).lower() == "true",
    }
    settings = {
        "use_llm": str(use_llm_narrative).lower() == "true",
        "llm_model": llm_model,
        "hardware_flavor": hardware_flavor,
    }

    # Execute agent
    result = run_credit_appraisal(
        df=df,
        run_dir=run_dir,
        rules=rules,
        settings=settings,
    )

    # Write a summary.json (already produced by agent, return meta)
    resp = {
        "run_id": run_id,
        "result": result,
    }
    return JSONResponse(resp)
