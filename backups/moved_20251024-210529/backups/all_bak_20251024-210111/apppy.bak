import os
import io
import requests
import streamlit as st
import pandas as pd

API_URL = os.getenv("API_URL", "http://localhost:8090")

st.set_page_config(page_title="AI Credit Appraisal Demo", layout="wide")
st.title("💳 AI Credit Appraisal Demo")
st.caption("A simple interface to upload datasets, run the credit appraisal agent, and download results.")

# state
if "last_run_id" not in st.session_state:
    st.session_state.last_run_id = None

# ──────────────────────────────────────────────────────────────
# 1) INPUTS
use_sample = st.checkbox("Use sample dataset", value=True)
uploaded_file = st.file_uploader(
    "Upload your CSV file",
    type=["csv"],
    disabled=use_sample,
    help="Uncheck 'Use sample dataset' to enable file upload."
)

use_llm = st.checkbox("Use LLM narrative (via Ollama)", value=True)
agent = st.selectbox("Choose Agent", ["credit_appraisal"])

# ──────────────────────────────────────────────────────────────
# 2) RUN AGENT
run_col, _ = st.columns([1, 4])
with run_col:
    if st.button("▶️ Run Agent", use_container_width=True):
        try:
            data = {
                "use_sample": str(use_sample).lower(),
                "use_llm_narrative": str(use_llm).lower(),
            }
            files = None

            if not use_sample:
                if uploaded_file is None:
                    st.error("Please upload a CSV or toggle 'Use sample dataset'.")
                    st.stop()
                # build proper multipart tuple
                content = uploaded_file.getvalue()
                if len(content) == 0:
                    st.error("Uploaded file is empty.")
                    st.stop()
                files = {"file": (uploaded_file.name, content, "text/csv")}

            r = requests.post(
                f"{API_URL}/v1/agents/{agent}/run",
                data=data,
                files=files
            )
            if r.status_code != 200:
                st.error(f"Run failed: {r.status_code}\n{r.text}")
            else:
                res = r.json()
                st.session_state.last_run_id = res.get("run_id")
                st.success(f"✅ Run succeeded. Run ID: {st.session_state.last_run_id}")
                # show quick result summary
                result = res.get("result", {})
                if result:
                    with st.expander("Result JSON", expanded=False):
                        st.json(result)
        except Exception as e:
            st.exception(e)

st.markdown("---")

# ──────────────────────────────────────────────────────────────
# 3) DOWNLOADS
st.subheader("📥 Download Latest Report")
fmt = st.selectbox("Select output format", ["pdf", "scores_csv", "explanations_csv", "csv", "json"])

dl_col, _ = st.columns([1, 4])
with dl_col:
    disabled = st.session_state.last_run_id is None
    if st.button("⬇️ Download", use_container_width=True, disabled=disabled):
        if not st.session_state.last_run_id:
            st.warning("No previous run yet. Run the agent first.")
        else:
            # Use the convenience endpoint with run_ref=run_latest
            # (so you can just click Download after each run)
            url = f"{API_URL}/v1/reports?run_ref=run_latest&format={fmt}"
            res = requests.get(url)
            if res.status_code != 200:
                st.error(f"Download failed: {res.status_code}\n{res.text}")
            else:
                # derive a filename
                cd = res.headers.get("content-disposition", "")  # e.g. attachment; filename="credit_report_xxx.pdf"
                fname = None
                if "filename=" in cd:
                    fname = cd.split("filename=")[-1].strip().strip('"')
                if not fname:
                    # fallback name
                    ext = "json" if fmt == "json" else "csv" if "csv" in fmt else "pdf"
                    fname = f"report.{ext}"
                st.download_button(
                    label=f"Save {fname}",
                    data=res.content,
                    file_name=fname,
                    mime=res.headers.get("content-type", "application/octet-stream"),
                    use_container_width=True,
                )

st.caption("Tip: This UI runs locally and talks to your local FastAPI on http://localhost:8090.")
