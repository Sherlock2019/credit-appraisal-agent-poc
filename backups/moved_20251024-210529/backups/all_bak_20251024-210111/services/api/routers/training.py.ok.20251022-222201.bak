# services/api/routers/training.py
from __future__ import annotations
import os
import json
import glob
import time
from typing import List, Dict, Any
import pandas as pd
from fastapi import APIRouter, HTTPException, Body
from fastapi.responses import JSONResponse
from agents.credit_appraisal.model_utils import (
    train_candidate_from_review,
    promote_candidate_to_production,
    get_production_meta,
)

ROOT = os.path.expanduser("~/demo-library")
RUNS_ROOT = os.path.join(ROOT, "services", "api", ".runs")
FEEDBACK_DIR = os.path.join(RUNS_ROOT, "feedback")
os.makedirs(FEEDBACK_DIR, exist_ok=True)

router = APIRouter()

@router.post("/v1/training/feedback")
def post_feedback(payload: Dict[str, Any] = Body(...)):
    """
    Accepts JSON:
      { "items": [ { application_id, ai_decision, human_decision, human_rule_reasons }, ... ] }
    Saves a timestamped JSON for later training consumption.
    """
    items: List[Dict[str, Any]] = payload.get("items") or []
    if not items:
        raise HTTPException(status_code=400, detail="No feedback items provided")
    ts = int(time.time())
    path_json = os.path.join(FEEDBACK_DIR, f"feedback_{ts}.json")
    with open(path_json, "w") as f:
        json.dump({"items": items}, f, indent=2)
    # Also write a flat CSV for convenience
    df = pd.DataFrame(items)
    df.to_csv(os.path.join(FEEDBACK_DIR, f"feedback_{ts}.csv"), index=False)
    return JSONResponse({"saved": True, "count": len(items), "path": path_json})

@router.post("/v1/training/train")
def post_train(cfg: Dict[str, Any] = Body(...)):
    """
    Accepts JSON:
      {
        "reviewed_csv": "<optional path>",
        "base_csv_globs": [".../ai-appraisal-outputs-*.csv"],
        "cutoff_date": "YYYY-MM-DD"
      }
    Trains a candidate model and writes to agents/credit_appraisal/models/trained/.
    """
    reviewed_csv = cfg.get("reviewed_csv")
    base_globs = cfg.get("base_csv_globs") or []
    cutoff_date = cfg.get("cutoff_date")

    # Gather AI outputs
    base_paths = []
    for g in base_globs:
        base_paths.extend(glob.glob(g))
    base_paths = sorted(set(base_paths))

    if not base_paths and not reviewed_csv:
        raise HTTPException(status_code=400, detail="No training data paths provided")

    job = train_candidate_from_review(
        reviewed_csv=reviewed_csv,
        ai_output_paths=base_paths,
        cutoff_date=cutoff_date,
    )
    return JSONResponse({"job_id": job.get("job_id"), "metrics": job.get("metrics", {})})

@router.post("/v1/training/promote")
def post_promote():
    meta = promote_candidate_to_production()
    if not meta:
        raise HTTPException(status_code=400, detail="No candidate model available to promote")
    return JSONResponse({"promoted": True, "meta": meta})

@router.get("/v1/training/production_meta")
def production_meta():
    meta = get_production_meta()
    return JSONResponse(meta)
