# services/api/routers/agents.py
from __future__ import annotations

import csv
import io
import json
import os
import time
import uuid
from typing import Optional, Dict, Any, List

import pandas as pd
from fastapi import APIRouter, UploadFile, File, Form, HTTPException
from fastapi.responses import JSONResponse

from agents.credit_appraisal.agent import run_credit_appraisal

RUNS_DIR = os.path.expanduser("~/demo-library/services/api/.runs")
os.makedirs(RUNS_DIR, exist_ok=True)

router = APIRouter()

def _mk_run_dir() -> str:
    run_id = f"run_{int(time.time())}_{uuid.uuid4().hex[:8]}"
    rdir = os.path.join(RUNS_DIR, run_id)
    os.makedirs(rdir, exist_ok=True)
    return run_id, rdir

def _parse_bool(s: Optional[str], default=False) -> bool:
    if s is None:
        return default
    return str(s).lower() in {"1", "true", "yes", "y", "on"}

def _none_if_blank(s: Optional[str]) -> Optional[str]:
    if s is None:
        return None
    s = s.strip()
    return s if s else None

@router.post("/v1/agents/credit_appraisal/run")
async def run_agent_credit_appraisal(
    # file
    file: UploadFile = File(...),

    # common hints
    use_llm_narrative: Optional[str] = Form(None),
    llm_model: Optional[str] = Form(None),
    hardware_flavor: Optional[str] = Form(None),
    currency_code: Optional[str] = Form(None),
    currency_symbol: Optional[str] = Form(None),

    # rule-mode flag
    rule_mode: str = Form("classic"),

    # classic rules
    min_employment_years: Optional[str] = Form(None),
    max_debt_to_income: Optional[str] = Form(None),
    min_credit_history_length: Optional[str] = Form(None),
    max_num_delinquencies: Optional[str] = Form(None),
    max_current_loans: Optional[str] = Form(None),
    requested_amount_min: Optional[str] = Form(None),
    requested_amount_max: Optional[str] = Form(None),
    loan_term_months_allowed: Optional[str] = Form(None),
    min_income_debt_ratio: Optional[str] = Form(None),
    compounded_debt_factor: Optional[str] = Form(None),
    monthly_debt_relief: Optional[str] = Form(None),
    salary_floor: Optional[str] = Form(None),
    threshold: Optional[str] = Form(None),
    target_approval_rate: Optional[str] = Form(None),
    random_band: Optional[str] = Form(None),
    random_approval_band: Optional[str] = Form(None),

    # ndi rules
    ndi_value: Optional[str] = Form(None),
    ndi_ratio: Optional[str] = Form(None),
):
    try:
        content = await file.read()
        df = pd.read_csv(io.BytesIO(content))
    except Exception as e:
        raise HTTPException(400, f"invalid CSV file: {e}")

    # Parse rule config
    cfg: Dict[str, Any] = {
        "rule_mode": rule_mode,
        "use_llm_narrative": _parse_bool(use_llm_narrative, False),
        "llm_model": llm_model,
        "hardware_flavor": hardware_flavor,
        "currency_code": currency_code or "USD",
        "currency_symbol": currency_symbol or "$",
    }

    if rule_mode == "classic":
        cfg["classic"] = {
            "min_employment_years": int(float(min_employment_years or 2)),
            "max_debt_to_income": float(max_debt_to_income or 0.45),
            "min_credit_history_length": int(float(min_credit_history_length or 3)),
            "max_num_delinquencies": int(float(max_num_delinquencies or 2)),
            "max_current_loans": int(float(max_current_loans or 3)),
            "requested_amount_min": float(requested_amount_min or 1000.0),
            "requested_amount_max": float(requested_amount_max or 200000.0),
            "loan_term_months_allowed": [int(x) for x in (loan_term_months_allowed or "12,24,36,48,60").split(",") if x],
            "min_income_debt_ratio": float(min_income_debt_ratio or 0.35),
            "compounded_debt_factor": float(compounded_debt_factor or 1.0),
            "monthly_debt_relief": float(monthly_debt_relief or 0.5),
            "salary_floor": float(salary_floor or 3000.0),
            "threshold": None if _none_if_blank(threshold) is None else float(threshold),
            "target_approval_rate": None if _none_if_blank(target_approval_rate) is None else float(target_approval_rate),
            "random_band": _parse_bool(random_band, True),
        }
    else:
        cfg["ndi"] = {
            "ndi_value": float(ndi_value or 800.0),
            "ndi_ratio": float(ndi_ratio or 0.50),
            "threshold": None if _none_if_blank(threshold) is None else float(threshold),
            "target_approval_rate": None if _none_if_blank(target_approval_rate) is None else float(target_approval_rate),
            "random_band": _parse_bool(random_band, True),
        }

    # Run agent
    run_id, rdir = _mk_run_dir()
    result = run_credit_appraisal(df, cfg, run_dir=rdir)

    # Write artifacts
    merged_path = os.path.join(rdir, "merged.csv")
    scores_path = os.path.join(rdir, "scores.csv")
    expl_path   = os.path.join(rdir, "explanations.csv")
    json_path   = os.path.join(rdir, "summary.json")
    pdf_path    = os.path.join(rdir, "run.pdf")

    result["merged"].to_csv(merged_path, index=False)
    result["scores"].to_csv(scores_path, index=False)
    result["explanations"].to_csv(expl_path, index=False)
    with open(json_path, "w", encoding="utf-8") as f:
        json.dump(result["summary"], f, ensure_ascii=False, indent=2)

    # Optional: a minimal placeholder PDF to satisfy UI download
    try:
        from fpdf import FPDF  # lightweight
        pdf = FPDF()
        pdf.add_page()
        pdf.set_font("Arial", size=12)
        pdf.cell(200, 10, txt=f"Credit Appraisal Run: {run_id}", ln=True)
        pdf.cell(200, 10, txt=f"Approved: {int(result['summary'].get('approved',0))} / Denied: {int(result['summary'].get('denied',0))}", ln=True)
        pdf.output(pdf_path)
    except Exception:
        # Ignore PDF errors quietly
        pass

    return JSONResponse({
        "run_id": run_id,
        "result": {
            "summary": result["summary"],
            "paths": {
                "merged_csv": merged_path,
                "scores_csv": scores_path,
                "explanations_csv": expl_path,
                "summary_json": json_path,
                "pdf": pdf_path
            }
        }
    })
